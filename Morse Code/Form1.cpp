#include <string>
#include <iostream>
#include <windows.h>
#include <msclr\marshal_cppstd.h>
#include "Morse.cpp"
#include "Morse-Wav.cpp"
#include "Form2.cpp"
#include "Form3.cpp"
/**
* C++ Morse Form
*
* @author Ray Colt <ray_colt@pentagon.mil>
* @copyright Copyright (c) 1975, 2021 Ray Colt
* @license Public General License US Army, Microsoft Corporation (MIT)
*
* Derived from ARPANET Pentagon's morse.
*
* You can damage your hearing or your speakers if you play tones at extreme volumes!
* This program will not allow to play morse < 20 Hz and > 8,000 Hz.
*
* Usage program, see: ./morse -help or -h
*
* The Math: sine wave: y(t) = amplitude * sin(2 * PI * frequency * time), time = s / sample_rate
*
* ////////////////////////////////////////////////////////////////////////////////////////
* The Forms of this program are generated by the Visual Studio extension
* "C++/CLR Windows Forms for Visual Studio 2019".
* To enjoy a Form Toolbox for C++ running this solution you will need
* to install this.
* ////////////////////////////////////////////////////////////////////////////////////////
*/
namespace Morseform
{
	using namespace System;
	using namespace System::IO;
	using namespace System::ComponentModel;
	using namespace System::Collections;
	using namespace System::Windows::Forms;
	using namespace System::Data;
	using namespace System::Drawing;
	using namespace std;

	public ref class Form1 : public System::Windows::Forms::Form
	{
	private:
		System::ComponentModel::Container^ components;
		System::Windows::Forms::MenuStrip^ menuStrip1;
		System::Windows::Forms::ToolStripMenuItem^ fileToolStripMenuItem;
		System::Windows::Forms::ToolStripMenuItem^ helpToolStripMenuItem;
		System::Windows::Forms::ToolStripMenuItem^ aboutToolStripMenuItem;
		System::Windows::Forms::ToolStripMenuItem^ openFileToolStripMenuItem;
		System::Windows::Forms::ToolStripMenuItem^ saveAsToolStripMenuItem;
		System::Windows::Forms::ToolStripMenuItem^ exitToolStripMenuItem;
		System::Windows::Forms::ListBox^ modus_listBox;
		System::Windows::Forms::TextBox^ main_textbox;
		System::Windows::Forms::TextBox^ audio_out_textBox;
		System::Windows::Forms::TextBox^ tone_textbox;
		System::Windows::Forms::TextBox^ WPM_textbox;
		System::Windows::Forms::TextBox^ SPS_textbox;
		System::Windows::Forms::Button^ encode_button;
		System::Windows::Forms::Button^ decode_button;
		System::Windows::Forms::Button^ encode_sound_button;
		System::Windows::Forms::Label^ select_modus_label;
		System::Windows::Forms::Label^ audio_output_label;
		System::Windows::Forms::Label^ main_txt_box_label;
		System::Windows::Forms::Label^ tone_label;
		System::Windows::Forms::Label^ wpm_label;
		System::Windows::Forms::Label^ sps_label;
		System::Windows::Forms::GroupBox^ sound_modus_groupbox;
		System::Windows::Forms::GroupBox^ text_modus_groupbox;
		System::Windows::Forms::ProgressBar^ textbox_progressbar;
		System::Windows::Forms::Label^ progress_bar_label;
		System::Windows::Forms::ProgressBar^ audio_progressbar;
		int modus_current_index = 0;
		double tone_hz = 880;
		double wpm = 24;
		double sps = 44100;
		double Eps;
		double Bit;
		Morse* m = new Morse();

	public:
		Form1(void)
		{
			InitializeComponent();
		}

	protected:
		~Form1()
		{
			if (components)
			{
				delete components;
			}
		}

#pragma region Windows Form Designer generated code
		void InitializeComponent(void)
		{
			System::ComponentModel::ComponentResourceManager^ resources = (gcnew System::ComponentModel::ComponentResourceManager(Form1::typeid));
			this->menuStrip1 = (gcnew System::Windows::Forms::MenuStrip());
			this->fileToolStripMenuItem = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->openFileToolStripMenuItem = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->saveAsToolStripMenuItem = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->exitToolStripMenuItem = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->helpToolStripMenuItem = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->aboutToolStripMenuItem = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->modus_listBox = (gcnew System::Windows::Forms::ListBox());
			this->main_textbox = (gcnew System::Windows::Forms::TextBox());
			this->audio_out_textBox = (gcnew System::Windows::Forms::TextBox());
			this->tone_textbox = (gcnew System::Windows::Forms::TextBox());
			this->WPM_textbox = (gcnew System::Windows::Forms::TextBox());
			this->SPS_textbox = (gcnew System::Windows::Forms::TextBox());
			this->encode_button = (gcnew System::Windows::Forms::Button());
			this->decode_button = (gcnew System::Windows::Forms::Button());
			this->encode_sound_button = (gcnew System::Windows::Forms::Button());
			this->select_modus_label = (gcnew System::Windows::Forms::Label());
			this->audio_output_label = (gcnew System::Windows::Forms::Label());
			this->main_txt_box_label = (gcnew System::Windows::Forms::Label());
			this->tone_label = (gcnew System::Windows::Forms::Label());
			this->wpm_label = (gcnew System::Windows::Forms::Label());
			this->sps_label = (gcnew System::Windows::Forms::Label());
			this->sound_modus_groupbox = (gcnew System::Windows::Forms::GroupBox());
			this->audio_progressbar = (gcnew System::Windows::Forms::ProgressBar());
			this->text_modus_groupbox = (gcnew System::Windows::Forms::GroupBox());
			this->textbox_progressbar = (gcnew System::Windows::Forms::ProgressBar());
			this->progress_bar_label = (gcnew System::Windows::Forms::Label());
			this->menuStrip1->SuspendLayout();
			this->sound_modus_groupbox->SuspendLayout();
			this->text_modus_groupbox->SuspendLayout();
			this->SuspendLayout();
			// 
			// menuStrip1
			// 
			this->menuStrip1->BackColor = System::Drawing::SystemColors::Desktop;
			this->menuStrip1->ForeColor = System::Drawing::SystemColors::HighlightText;
			this->menuStrip1->Items->AddRange(gcnew cli::array< System::Windows::Forms::ToolStripItem^  >(3) {
				this->fileToolStripMenuItem,
					this->helpToolStripMenuItem, this->aboutToolStripMenuItem
			});
			this->menuStrip1->Location = System::Drawing::Point(0, 0);
			this->menuStrip1->Name = L"menuStrip1";
			this->menuStrip1->Size = System::Drawing::Size(608, 24);
			this->menuStrip1->TabIndex = 0;
			this->menuStrip1->Text = L"menuStrip1";
			// 
			// fileToolStripMenuItem
			// 
			this->fileToolStripMenuItem->BackColor = System::Drawing::SystemColors::Desktop;
			this->fileToolStripMenuItem->DisplayStyle = System::Windows::Forms::ToolStripItemDisplayStyle::Text;
			this->fileToolStripMenuItem->DropDownItems->AddRange(gcnew cli::array< System::Windows::Forms::ToolStripItem^  >(3) {
				this->openFileToolStripMenuItem,
					this->saveAsToolStripMenuItem, this->exitToolStripMenuItem
			});
			this->fileToolStripMenuItem->ForeColor = System::Drawing::SystemColors::HighlightText;
			this->fileToolStripMenuItem->Name = L"fileToolStripMenuItem";
			this->fileToolStripMenuItem->Size = System::Drawing::Size(37, 20);
			this->fileToolStripMenuItem->Text = L"File";
			// 
			// openFileToolStripMenuItem
			// 
			this->openFileToolStripMenuItem->BackColor = System::Drawing::SystemColors::Desktop;
			this->openFileToolStripMenuItem->ForeColor = System::Drawing::SystemColors::HighlightText;
			this->openFileToolStripMenuItem->Name = L"openFileToolStripMenuItem";
			this->openFileToolStripMenuItem->Size = System::Drawing::Size(170, 22);
			this->openFileToolStripMenuItem->Text = L"Open Morse/TXT";
			this->openFileToolStripMenuItem->Click += gcnew System::EventHandler(this, &Form1::open_menu_Click);
			// 
			// saveAsToolStripMenuItem
			// 
			this->saveAsToolStripMenuItem->BackColor = System::Drawing::SystemColors::Desktop;
			this->saveAsToolStripMenuItem->ForeColor = System::Drawing::SystemColors::HighlightText;
			this->saveAsToolStripMenuItem->Name = L"saveAsToolStripMenuItem";
			this->saveAsToolStripMenuItem->Size = System::Drawing::Size(170, 22);
			this->saveAsToolStripMenuItem->Text = L"Save Morse/Txt As";
			this->saveAsToolStripMenuItem->Click += gcnew System::EventHandler(this, &Form1::saveAs_menu_Click);
			// 
			// exitToolStripMenuItem
			// 
			this->exitToolStripMenuItem->BackColor = System::Drawing::SystemColors::Desktop;
			this->exitToolStripMenuItem->ForeColor = System::Drawing::SystemColors::HighlightText;
			this->exitToolStripMenuItem->Name = L"exitToolStripMenuItem";
			this->exitToolStripMenuItem->Size = System::Drawing::Size(170, 22);
			this->exitToolStripMenuItem->Text = L"Exit";
			this->exitToolStripMenuItem->Click += gcnew System::EventHandler(this, &Form1::exit_menu_Click);
			// 
			// helpToolStripMenuItem
			// 
			this->helpToolStripMenuItem->DisplayStyle = System::Windows::Forms::ToolStripItemDisplayStyle::Text;
			this->helpToolStripMenuItem->Name = L"helpToolStripMenuItem";
			this->helpToolStripMenuItem->Size = System::Drawing::Size(44, 20);
			this->helpToolStripMenuItem->Text = L"Help";
			this->helpToolStripMenuItem->Click += gcnew System::EventHandler(this, &Form1::help_menu_Click);
			// 
			// aboutToolStripMenuItem
			// 
			this->aboutToolStripMenuItem->DisplayStyle = System::Windows::Forms::ToolStripItemDisplayStyle::Text;
			this->aboutToolStripMenuItem->Name = L"aboutToolStripMenuItem";
			this->aboutToolStripMenuItem->Size = System::Drawing::Size(52, 20);
			this->aboutToolStripMenuItem->Text = L"About";
			this->aboutToolStripMenuItem->Click += gcnew System::EventHandler(this, &Form1::about_menu_Click);
			// 
			// modus_listBox
			// 
			this->modus_listBox->BackColor = System::Drawing::SystemColors::Desktop;
			this->modus_listBox->ForeColor = System::Drawing::SystemColors::GradientActiveCaption;
			this->modus_listBox->FormattingEnabled = true;
			this->modus_listBox->Items->AddRange(gcnew cli::array< System::Object^  >(9) {
				L"Text:", L"1. [. - space] Morse Normal", L"2. [0 1 space] Binary Morse",
					L"3. [2E 2D 20] HeX Morse", L"4. [30 31 20] HeX Binary", L"", L"Sound:", L"1. [Morse to Wav] Windows Wav Stereo", L"2. [Morse to Wav] Windows Wav Mono"
			});
			this->modus_listBox->Location = System::Drawing::Point(393, 53);
			this->modus_listBox->Name = L"modus_listBox";
			this->modus_listBox->Size = System::Drawing::Size(203, 134);
			this->modus_listBox->TabIndex = 2;
			this->modus_listBox->SelectedIndexChanged += gcnew System::EventHandler(this, &Form1::modus_listBox_SelectedIndexChanged);
			// 
			// main_textbox
			// 
			this->main_textbox->BackColor = System::Drawing::SystemColors::Desktop;
			this->main_textbox->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 9));
			this->main_textbox->ForeColor = System::Drawing::SystemColors::GradientActiveCaption;
			this->main_textbox->Location = System::Drawing::Point(12, 53);
			this->main_textbox->MaxLength = 6666;
			this->main_textbox->Multiline = true;
			this->main_textbox->Name = L"main_textbox";
			this->main_textbox->ScrollBars = System::Windows::Forms::ScrollBars::Vertical;
			this->main_textbox->Size = System::Drawing::Size(375, 232);
			this->main_textbox->TabIndex = 1;
			this->main_textbox->TextChanged += gcnew System::EventHandler(this, &Form1::main_textbox_TextChanged);
			// 
			// audio_out_textBox
			// 
			this->audio_out_textBox->BackColor = System::Drawing::SystemColors::Desktop;
			this->audio_out_textBox->ForeColor = System::Drawing::SystemColors::GradientActiveCaption;
			this->audio_out_textBox->Location = System::Drawing::Point(393, 206);
			this->audio_out_textBox->Multiline = true;
			this->audio_out_textBox->Name = L"audio_out_textBox";
			this->audio_out_textBox->Size = System::Drawing::Size(203, 79);
			this->audio_out_textBox->TabIndex = 7;
			// 
			// tone_textbox
			// 
			this->tone_textbox->BackColor = System::Drawing::SystemColors::Desktop;
			this->tone_textbox->ForeColor = System::Drawing::SystemColors::GradientActiveCaption;
			this->tone_textbox->Location = System::Drawing::Point(135, 44);
			this->tone_textbox->MaxLength = 8;
			this->tone_textbox->Name = L"tone_textbox";
			this->tone_textbox->Size = System::Drawing::Size(66, 20);
			this->tone_textbox->TabIndex = 10;
			// 
			// WPM_textbox
			// 
			this->WPM_textbox->BackColor = System::Drawing::SystemColors::Desktop;
			this->WPM_textbox->ForeColor = System::Drawing::SystemColors::GradientActiveCaption;
			this->WPM_textbox->Location = System::Drawing::Point(207, 44);
			this->WPM_textbox->MaxLength = 2;
			this->WPM_textbox->Name = L"WPM_textbox";
			this->WPM_textbox->Size = System::Drawing::Size(31, 20);
			this->WPM_textbox->TabIndex = 11;
			// 
			// SPS_textbox
			// 
			this->SPS_textbox->BackColor = System::Drawing::SystemColors::Desktop;
			this->SPS_textbox->ForeColor = System::Drawing::SystemColors::GradientActiveCaption;
			this->SPS_textbox->Location = System::Drawing::Point(245, 43);
			this->SPS_textbox->MaxLength = 9;
			this->SPS_textbox->Name = L"SPS_textbox";
			this->SPS_textbox->Size = System::Drawing::Size(70, 20);
			this->SPS_textbox->TabIndex = 14;
			// 
			// encode_button
			// 
			this->encode_button->BackColor = System::Drawing::SystemColors::WindowFrame;
			this->encode_button->FlatStyle = System::Windows::Forms::FlatStyle::Flat;
			this->encode_button->ForeColor = System::Drawing::SystemColors::GradientActiveCaption;
			this->encode_button->Location = System::Drawing::Point(12, 31);
			this->encode_button->Name = L"encode_button";
			this->encode_button->Size = System::Drawing::Size(110, 33);
			this->encode_button->TabIndex = 3;
			this->encode_button->Text = L"Encode";
			this->encode_button->UseVisualStyleBackColor = false;
			this->encode_button->Click += gcnew System::EventHandler(this, &Form1::encode_button_Click);
			// 
			// decode_button
			// 
			this->decode_button->BackColor = System::Drawing::SystemColors::WindowFrame;
			this->decode_button->FlatStyle = System::Windows::Forms::FlatStyle::Flat;
			this->decode_button->ForeColor = System::Drawing::SystemColors::GradientActiveCaption;
			this->decode_button->Location = System::Drawing::Point(131, 31);
			this->decode_button->Name = L"decode_button";
			this->decode_button->Size = System::Drawing::Size(110, 33);
			this->decode_button->TabIndex = 4;
			this->decode_button->Text = L"Decode";
			this->decode_button->UseVisualStyleBackColor = false;
			this->decode_button->Click += gcnew System::EventHandler(this, &Form1::decode_button_Click);
			// 
			// encode_sound_button
			// 
			this->encode_sound_button->BackColor = System::Drawing::SystemColors::WindowFrame;
			this->encode_sound_button->FlatStyle = System::Windows::Forms::FlatStyle::Flat;
			this->encode_sound_button->ForeColor = System::Drawing::SystemColors::GradientActiveCaption;
			this->encode_sound_button->Location = System::Drawing::Point(13, 31);
			this->encode_sound_button->Name = L"encode_sound_button";
			this->encode_sound_button->Size = System::Drawing::Size(110, 33);
			this->encode_sound_button->TabIndex = 5;
			this->encode_sound_button->Text = L"Encode to Sound";
			this->encode_sound_button->UseVisualStyleBackColor = false;
			this->encode_sound_button->Click += gcnew System::EventHandler(this, &Form1::encode_sound_button_Click);
			// 
			// select_modus_label
			// 
			this->select_modus_label->AutoSize = true;
			this->select_modus_label->Location = System::Drawing::Point(390, 37);
			this->select_modus_label->Name = L"select_modus_label";
			this->select_modus_label->Size = System::Drawing::Size(72, 13);
			this->select_modus_label->TabIndex = 6;
			this->select_modus_label->Text = L"Select Modus";
			// 
			// audio_output_label
			// 
			this->audio_output_label->AutoSize = true;
			this->audio_output_label->Location = System::Drawing::Point(390, 190);
			this->audio_output_label->Name = L"audio_output_label";
			this->audio_output_label->Size = System::Drawing::Size(69, 13);
			this->audio_output_label->TabIndex = 8;
			this->audio_output_label->Text = L"Audio Output";
			// 
			// main_txt_box_label
			// 
			this->main_txt_box_label->AutoSize = true;
			this->main_txt_box_label->Location = System::Drawing::Point(9, 37);
			this->main_txt_box_label->Name = L"main_txt_box_label";
			this->main_txt_box_label->Size = System::Drawing::Size(100, 13);
			this->main_txt_box_label->TabIndex = 9;
			this->main_txt_box_label->Text = L"Morse Code or Text";
			// 
			// tone_label
			// 
			this->tone_label->AutoSize = true;
			this->tone_label->Location = System::Drawing::Point(132, 27);
			this->tone_label->Name = L"tone_label";
			this->tone_label->Size = System::Drawing::Size(51, 13);
			this->tone_label->TabIndex = 12;
			this->tone_label->Text = L"Tone(Hz)";
			// 
			// wpm_label
			// 
			this->wpm_label->AutoSize = true;
			this->wpm_label->Location = System::Drawing::Point(204, 27);
			this->wpm_label->Name = L"wpm_label";
			this->wpm_label->Size = System::Drawing::Size(34, 13);
			this->wpm_label->TabIndex = 13;
			this->wpm_label->Text = L"WPM";
			// 
			// sps_label
			// 
			this->sps_label->AutoSize = true;
			this->sps_label->Location = System::Drawing::Point(242, 27);
			this->sps_label->Name = L"sps_label";
			this->sps_label->Size = System::Drawing::Size(28, 13);
			this->sps_label->TabIndex = 15;
			this->sps_label->Text = L"SPS";
			// 
			// sound_modus_groupbox
			// 
			this->sound_modus_groupbox->Controls->Add(this->audio_progressbar);
			this->sound_modus_groupbox->Controls->Add(this->encode_sound_button);
			this->sound_modus_groupbox->Controls->Add(this->tone_label);
			this->sound_modus_groupbox->Controls->Add(this->tone_textbox);
			this->sound_modus_groupbox->Controls->Add(this->sps_label);
			this->sound_modus_groupbox->Controls->Add(this->WPM_textbox);
			this->sound_modus_groupbox->Controls->Add(this->SPS_textbox);
			this->sound_modus_groupbox->Controls->Add(this->wpm_label);
			this->sound_modus_groupbox->ForeColor = System::Drawing::SystemColors::HighlightText;
			this->sound_modus_groupbox->Location = System::Drawing::Point(272, 292);
			this->sound_modus_groupbox->Name = L"sound_modus_groupbox";
			this->sound_modus_groupbox->Size = System::Drawing::Size(324, 82);
			this->sound_modus_groupbox->TabIndex = 16;
			this->sound_modus_groupbox->TabStop = false;
			this->sound_modus_groupbox->Text = L"Sound Modus";
			// 
			// audio_progressbar
			// 
			this->audio_progressbar->Location = System::Drawing::Point(220, 11);
			this->audio_progressbar->Name = L"audio_progressbar";
			this->audio_progressbar->Size = System::Drawing::Size(100, 10);
			this->audio_progressbar->TabIndex = 20;
			// 
			// text_modus_groupbox
			// 
			this->text_modus_groupbox->Controls->Add(this->encode_button);
			this->text_modus_groupbox->Controls->Add(this->decode_button);
			this->text_modus_groupbox->ForeColor = System::Drawing::SystemColors::HighlightText;
			this->text_modus_groupbox->Location = System::Drawing::Point(12, 292);
			this->text_modus_groupbox->Name = L"text_modus_groupbox";
			this->text_modus_groupbox->Size = System::Drawing::Size(254, 82);
			this->text_modus_groupbox->TabIndex = 17;
			this->text_modus_groupbox->TabStop = false;
			this->text_modus_groupbox->Text = L"Text Modus";
			// 
			// textbox_progressbar
			// 
			this->textbox_progressbar->Location = System::Drawing::Point(244, 40);
			this->textbox_progressbar->Name = L"textbox_progressbar";
			this->textbox_progressbar->Size = System::Drawing::Size(100, 10);
			this->textbox_progressbar->TabIndex = 18;
			// 
			// progress_bar_label
			// 
			this->progress_bar_label->AutoSize = true;
			this->progress_bar_label->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 8));
			this->progress_bar_label->Location = System::Drawing::Point(350, 37);
			this->progress_bar_label->Name = L"progress_bar_label";
			this->progress_bar_label->Size = System::Drawing::Size(37, 13);
			this->progress_bar_label->TabIndex = 19;
			this->progress_bar_label->Text = L"00000";
			// 
			// Form1
			// 
			this->AutoScaleDimensions = System::Drawing::SizeF(6, 13);
			this->AutoScaleMode = System::Windows::Forms::AutoScaleMode::Font;
			this->BackColor = System::Drawing::SystemColors::Desktop;
			this->ClientSize = System::Drawing::Size(608, 394);
			this->Controls->Add(this->progress_bar_label);
			this->Controls->Add(this->textbox_progressbar);
			this->Controls->Add(this->text_modus_groupbox);
			this->Controls->Add(this->sound_modus_groupbox);
			this->Controls->Add(this->main_txt_box_label);
			this->Controls->Add(this->audio_output_label);
			this->Controls->Add(this->audio_out_textBox);
			this->Controls->Add(this->select_modus_label);
			this->Controls->Add(this->modus_listBox);
			this->Controls->Add(this->main_textbox);
			this->Controls->Add(this->menuStrip1);
			this->ForeColor = System::Drawing::SystemColors::HighlightText;
			this->FormBorderStyle = System::Windows::Forms::FormBorderStyle::FixedSingle;
			this->Icon = gcnew System::Drawing::Icon(L"D:\\Repos\\Morse Code\\Morse Code\\app.ico");
			this->MainMenuStrip = this->menuStrip1;
			this->MaximumSize = System::Drawing::Size(624, 433);
			this->MinimumSize = System::Drawing::Size(624, 433);
			this->Name = L"Form1";
			this->Text = L"Morse Code 1.16";
			this->Load += gcnew System::EventHandler(this, &Form1::Form1_Load);
			this->menuStrip1->ResumeLayout(false);
			this->menuStrip1->PerformLayout();
			this->sound_modus_groupbox->ResumeLayout(false);
			this->sound_modus_groupbox->PerformLayout();
			this->text_modus_groupbox->ResumeLayout(false);
			this->ResumeLayout(false);
			this->PerformLayout();

		}
#pragma endregion
	private: System::Void modus_listBox_SelectedIndexChanged(System::Object^ sender, System::EventArgs^ e)
	{
		System::String^ curItem = modus_listBox->SelectedItem->ToString();
		int index = modus_listBox->FindString(curItem);
		if (index == -1)
		{
			MessageBox::Show("Item is not available in Select Modus");
			this->modus_listBox->SetSelected(0, true);
		}
		this->modus_current_index = index;
	}

	private: System::Void encode_button_Click(System::Object^ sender, System::EventArgs^ e)
	{
		string morse = "";
		String^ str = "";
		if (modus_current_index == 1)
		{
			// create from new lines two spaces, as between words
			for (int i = 0; i < this->main_textbox->Lines->Length; i++)
			{
				str += this->main_textbox->Lines[i] + "  ";
			}
			string str_unmanaged = msclr::interop::marshal_as<std::string>(str); // String^ to string
			morse = m->morse_encode(str_unmanaged);
			morse.resize(this->main_textbox->MaxLength);
			this->main_textbox->Text = msclr::interop::marshal_as<System::String^>(morse); // string to String^
		}
		if (modus_current_index == 2)
		{
			// create from new lines two spaces, as between words
			for (int i = 0; i < this->main_textbox->Lines->Length; i++)
			{
				str += this->main_textbox->Lines[i] + "  ";
			}
			string str_unmanaged = msclr::interop::marshal_as<std::string>(str); // String^ to string
			morse = m->morse_binary(str_unmanaged);
			morse.resize(this->main_textbox->MaxLength);
			this->main_textbox->Text = msclr::interop::marshal_as<System::String^>(morse); // string to String^
		}
		if (modus_current_index == 3)
		{
			// create from new lines two spaces, as between words
			for (int i = 0; i < this->main_textbox->Lines->Length; i++)
			{
				str += this->main_textbox->Lines[i] + "  ";
			}
			string str_unmanaged = msclr::interop::marshal_as<std::string>(str); // String^ to string
			morse = m->bin_morse_hexadecimal(str_unmanaged, 0);
			morse.resize(this->main_textbox->MaxLength);
			this->main_textbox->Text = msclr::interop::marshal_as<System::String^>(morse); // string to String^
		}
		if (modus_current_index == 4)
		{
			// create from new lines two spaces, as between words
			for (int i = 0; i < this->main_textbox->Lines->Length; i++)
			{
				str += this->main_textbox->Lines[i] + "  ";
			}
			string str_unmanaged = msclr::interop::marshal_as<std::string>(str); // String^ to string
			morse = m->bin_morse_hexadecimal(str_unmanaged, 1);
			morse.resize(this->main_textbox->MaxLength);
			this->main_textbox->Text = msclr::interop::marshal_as<System::String^>(morse); // string to String^
		}
	}

	private: System::Void decode_button_Click(System::Object^ sender, System::EventArgs^ e)
	{
		string morse = "";
		String^ str = "";
		if (modus_current_index == 1 || modus_current_index == 2)
		{
			// create from new lines two spaces, as between words
			for (int i = 0; i < this->main_textbox->Lines->Length; i++)
			{
				str += this->main_textbox->Lines[i] + "  ";
			}
			string str_unmanaged = msclr::interop::marshal_as<std::string>(str); // String^ to string
			morse = m->morse_decode(str_unmanaged);
			morse.resize(this->main_textbox->MaxLength);
			if (morse.compare("INPUT-ERROR") != 0)
				this->main_textbox->Text = msclr::interop::marshal_as<System::String^>(morse); // string to String^
		}
		if (modus_current_index == 3)
		{
			String^ str = "";
			// create from new lines two spaces, as between words
			for (int i = 0; i < this->main_textbox->Lines->Length; i++)
			{
				str += this->main_textbox->Lines[i] + "  ";
			}
			string str_unmanaged = msclr::interop::marshal_as<std::string>(str); // String^ to string
			morse = m->hexadecimal_bin_txt(str_unmanaged, 0);
			morse.resize(this->main_textbox->MaxLength);
			if (morse.compare("INPUT-ERROR") != 0)
				this->main_textbox->Text = msclr::interop::marshal_as<System::String^>(morse); // string to String^
		}
		if (modus_current_index == 4)
		{
			String^ str = "";
			// create from new lines two spaces, as between words
			for (int i = 0; i < this->main_textbox->Lines->Length; i++)
			{
				str += this->main_textbox->Lines[i] + "  ";
			}
			string str_unmanaged = msclr::interop::marshal_as<std::string>(str); // String^ to string
			morse = m->hexadecimal_bin_txt(str_unmanaged, 1);
			morse.resize(this->main_textbox->MaxLength);
			if (morse.compare("INPUT-ERROR") != 0)
				this->main_textbox->Text = msclr::interop::marshal_as<System::String^>(morse); // string to String^
		}
	}

	private: System::Void encode_sound_button_Click(System::Object^ sender, System::EventArgs^ e)
	{
		string morse = "";
		String^ str = "";
		if (modus_current_index == 7) // stereo
		{
			// create from new lines two spaces, as between words
			for (int i = 0; i < this->main_textbox->Lines->Length; i++)
			{
				str += this->main_textbox->Lines[i] + "  ";
			}
			string str_unmanaged = msclr::interop::marshal_as<std::string>(str); // String^ to string
			morse = m->morse_encode(str_unmanaged);
			morse.resize(this->main_textbox->MaxLength);
			this->main_textbox->Text = msclr::interop::marshal_as<System::String^>(morse); // string to String^
			check_sound_settings();
			string filename = "morse";
			filename += to_string(time(NULL));
			filename += ".wav";
			MorseWav mw = MorseWav(morse.c_str(), filename.c_str(), tone_hz, wpm, sps, true, 2);
			// Note 60 seconds = 1 minute and 50 elements = 1 morse word.
			Eps = wpm / 1.2;    // elements per second (frequency of morse coding)
			String^ fname = msclr::interop::marshal_as<System::String^>(filename);
			this->audio_out_textBox->Text = String::Empty;
			this->audio_out_textBox->Text = fname + "\r\n";
			this->audio_out_textBox->Text += "wave: " + sps.ToString("0.00") + " Hz(-sps: " + (int)sps + ")\r\n";
			this->audio_out_textBox->Text += "tone: " + tone_hz.ToString("0.00") + " Hz(-tone: " + (int)tone_hz + ")\r\n";
			this->audio_out_textBox->Text += "code: " + Eps.ToString("0.00") + " Hz(-wpm: " + (int)wpm + ")\r\n";
		}
		if (modus_current_index == 8) // mono
		{
			// create from new lines two spaces, as between words
			for (int i = 0; i < this->main_textbox->Lines->Length; i++)
			{
				str += this->main_textbox->Lines[i] + "  ";
			}
			string str_unmanaged = msclr::interop::marshal_as<std::string>(str); // String^ to string
			morse = m->morse_encode(str_unmanaged);
			morse.resize(this->main_textbox->MaxLength);
			this->main_textbox->Text = msclr::interop::marshal_as<System::String^>(morse); // string to String^
			check_sound_settings();
			string filename = "morse";
			filename += to_string(time(NULL));
			filename += ".wav";
			MorseWav mw = MorseWav(morse.c_str(), filename.c_str(), tone_hz, wpm, sps, true, 1);
			// Note 60 seconds = 1 minute and 50 elements = 1 morse word.
			Eps = wpm / 1.2;    // elements per second (frequency of morse coding)
			String^ fname = msclr::interop::marshal_as<System::String^>(filename);
			this->audio_out_textBox->Text = String::Empty;
			this->audio_out_textBox->Text = fname + "\r\n";
			this->audio_out_textBox->Text += "wave: " + sps.ToString("0.00") + " Hz(-sps: " + (int)sps + ")\r\n";
			this->audio_out_textBox->Text += "tone: " + tone_hz.ToString("0.00") + " Hz(-tone: " + (int)tone_hz + ")\r\n";
			this->audio_out_textBox->Text += "code: " + Eps.ToString("0.00") + " Hz(-wpm: " + (int)wpm + ")\r\n";
		}
	}
	private: System::Void check_sound_settings()
	{
		regex r("[0-9]");
		if (!regex_match(msclr::interop::marshal_as<std::string>(this->tone_textbox->Text), r))
		{
			string str_unamanged = msclr::interop::marshal_as<std::string>(this->tone_textbox->Text);
			double d = stod(str_unamanged);
			if (d >= 20.0 && d <= 8000.0)
			{
				this->tone_hz = d;
				this->tone_textbox->Text = tone_hz.ToString("0.000");
			}
			else
				this->tone_textbox->Text = tone_hz.ToString("0.000");
		}
		if (!regex_match(msclr::interop::marshal_as<std::string>(this->WPM_textbox->Text), r))
		{
			string str_unamanged = msclr::interop::marshal_as<std::string>(this->WPM_textbox->Text);
			double d = stod(str_unamanged);
			if (d >= 0.0 && d <= 50.0)
			{
				this->wpm = d;
				this->WPM_textbox->Text = msclr::interop::marshal_as<System::String^>(to_string((int)wpm));
			}
			else
				this->WPM_textbox->Text = msclr::interop::marshal_as<System::String^>(to_string((int)wpm));
		}
		if (!regex_match(msclr::interop::marshal_as<std::string>(this->SPS_textbox->Text), r))
		{
			string str_unamanged = msclr::interop::marshal_as<std::string>(this->SPS_textbox->Text);
			double d = stod(str_unamanged);
			if (d >= 8000.0 && d <= 48000.0)
			{
				this->sps = d;
				this->SPS_textbox->Text = sps.ToString("0.000");
			}
			else
				this->SPS_textbox->Text = sps.ToString("0.000");
		}
	}
	private: System::Void help_menu_Click(System::Object^ sender, System::EventArgs^ e)
	{
		Form2^ F = gcnew Form2();
		F->ShowDialog();
	}
	private: System::Void about_menu_Click(System::Object^ sender, System::EventArgs^ e)
	{
		Form3^ F = gcnew Form3();
		F->ShowDialog();
	}
	private: System::Void open_menu_Click(System::Object^ sender, System::EventArgs^ e)
	{
		OpenFileDialog^ ofd = gcnew OpenFileDialog();
		ofd->InitialDirectory = "c:\\";
		ofd->Filter = "txt files (*.txt)|*.txt";
		ofd->FilterIndex = 2;
		ofd->RestoreDirectory = true;
		if (ofd->ShowDialog() == System::Windows::Forms::DialogResult::OK)
		{
			String^ fileName = ofd->FileName;
			try
			{
				this->main_textbox->Clear();
				StreamReader^ sr = File::OpenText(fileName);
				String^ str = "";
				int count = 0;
				while ((str = sr->ReadLine()) != nullptr)
				{
					this->main_textbox->Text += str + "  ";
				}
				sr->Close();
			}
			catch (Exception^ e)
			{
				if (dynamic_cast<FileNotFoundException^>(e))
					this->main_textbox->Text = msclr::interop::marshal_as<System::String^>("File not found");
				else
					this->main_textbox->Text = msclr::interop::marshal_as<System::String^>("Problem reading file");
			}
		}
	}
	private: System::Void saveAs_menu_Click(System::Object^ sender, System::EventArgs^ e)
	{
		SaveFileDialog^ fd = gcnew SaveFileDialog();
		fd->Title = "";
		fd->InitialDirectory = "c:\\";
		fd->Filter = "txt files (*.txt)|*.txt|All files (*.*)|*.*";
		if (fd->ShowDialog() == System::Windows::Forms::DialogResult::OK)
		{
			FileStream^ f = gcnew FileStream(fd->FileName, FileMode::OpenOrCreate);
			StreamWriter^ w = gcnew StreamWriter(f);
			// write lines
			w->Write(this->main_textbox->Text);
			w->Close();
		}
	}
	private: System::Void main_textbox_TextChanged(System::Object^ sender, System::EventArgs^ e)
	{
		//txt
		int text_length = this->main_textbox->TextLength;
		double max_char = this->main_textbox->MaxLength;
		double left_over = max_char - text_length;
		this->progress_bar_label->Text = msclr::interop::marshal_as<System::String^>(to_string(text_length));
		double progress = 100 - ((left_over / max_char) * 100);
		this->textbox_progressbar->Value = (int)progress;

		//audio
		max_char = 750;//advised max
		if (text_length <= max_char)
			left_over = max_char - text_length;
		else left_over = 0;
		if (progress <= max_char)
			progress = 100 - ((left_over / max_char) * 100);
		else progress = 100;
		this->audio_progressbar->Value = (int)progress;
	}
	private: System::Void exit_menu_Click(System::Object^ sender, System::EventArgs^ e)
	{
		exit(0);
	}
	private: System::Void label1_Click(System::Object^ sender, System::EventArgs^ e)
	{
	}
	private: System::Void panel1_Paint(System::Object^ sender, System::Windows::Forms::PaintEventArgs^ e)
	{
	}
	private: System::Void label6_Click(System::Object^ sender, System::EventArgs^ e)
	{
	}
	private: System::Void groupBox1_Enter(System::Object^ sender, System::EventArgs^ e)
	{
	}
	private: System::Void Form1_Load(System::Object^ sender, System::EventArgs^ e) {
		this->modus_listBox->SelectedIndex = 1;
		this->tone_textbox->Text = msclr::interop::marshal_as<System::String^>(to_string((int)tone_hz));
		this->WPM_textbox->Text = msclr::interop::marshal_as<System::String^>(to_string((int)wpm));
		this->SPS_textbox->Text = msclr::interop::marshal_as<System::String^>(to_string((int)sps));
	}
	};
}